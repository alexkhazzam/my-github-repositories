{"version":3,"sources":["Components/Repository/Repository.jsx","Components/SVGs/SVG1.jsx","Components/FetchRepositories/FetchRepositories.jsx","Containers/App.jsx","serviceWorker.js","index.js"],"names":["Repository","props","className","title","description","forks","stars","language","href","appUrl","target","projUrl","recentCommit","HelpLinksLoader","speed","width","height","viewBox","backgroundColor","foregroundColor","x","y","rx","ry","cx","cy","r","metadata","name","github","filename","FetchRepositories","state","repositoryData","fetchErr","gitUsername","invalidInput","requestComplete","repositoryCount","fetchRepositories","event","preventDefault","setState","axios","get","then","repoObj","repoCount","repoData","data","forEach","repo","push","console","log","catch","err","setUsername","value","trim","repositories","this","map","stargazers_count","svn_url","html_url","pushed_at","key","id","type","placeholder","onChange","required","onClick","SVG1","Component","App","Boolean","window","location","hostname","match","defaults","headers","post","interceptors","request","use","error","Promise","reject","response","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.bbc08d77.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./Repository.css\";\n\nconst Repository = (props) => {\n  return (\n    <div className={\"repo\"}>\n      <h2 className={\"repo__header\"}>{props.title}</h2>\n      <p className={\"repo__item description\"}>\n        <span>Description: </span>\n        {props.description}\n      </p>\n      <p className={\"repo__item\"}>\n        <span>Forks: </span>\n        {props.forks}\n      </p>\n      <p className={\"repo__item\"}>\n        <span>Stargazers Count: </span>\n        {props.stars}\n      </p>\n      <p className={\"repo__item\"}>\n        <span>Language: </span>\n        {props.language}\n      </p>\n      <p className={\"repo__item\"}>\n        <span>Website URL: </span>\n        <a href={props.appUrl} target=\"_blank\">\n          {props.appUrl}\n        </a>\n      </p>\n      <p className={\"repo__item\"}>\n        <span>Code URL: </span>\n        <a href={props.projUrl} target=\"_blank\">\n          {props.projUrl}\n        </a>\n      </p>\n      <p className={\"repo__item\"}>\n        <span>Most Recent Commit: </span>\n        {props.recentCommit}\n      </p>\n    </div>\n  );\n};\n\nexport default Repository;\n","import React from \"react\";\nimport ContentLoader from \"react-content-loader\";\n\nconst HelpLinksLoader = (props) => (\n  <ContentLoader\n    speed={2}\n    width={700}\n    height={350}\n    viewBox=\"0 0 700 350\"\n    backgroundColor=\"#f5f5f5\"\n    foregroundColor=\"#dbdbdb\"\n    {...props}\n  >\n    <rect x=\"4\" y=\"8\" rx=\"3\" ry=\"3\" width=\"8\" height=\"317\" />\n    <rect x=\"7\" y=\"317\" rx=\"3\" ry=\"3\" width=\"669\" height=\"8\" />\n    <rect x=\"669\" y=\"9\" rx=\"3\" ry=\"3\" width=\"7\" height=\"313\" />\n    <rect x=\"5\" y=\"8\" rx=\"3\" ry=\"3\" width=\"669\" height=\"7\" />\n    <rect x=\"114\" y=\"52\" rx=\"6\" ry=\"6\" width=\"483\" height=\"15\" />\n    <circle cx=\"77\" cy=\"60\" r=\"15\" />\n    <rect x=\"116\" y=\"105\" rx=\"6\" ry=\"6\" width=\"420\" height=\"15\" />\n    <circle cx=\"78\" cy=\"113\" r=\"15\" />\n    <rect x=\"115\" y=\"158\" rx=\"6\" ry=\"6\" width=\"483\" height=\"15\" />\n    <circle cx=\"78\" cy=\"166\" r=\"15\" />\n    <rect x=\"117\" y=\"211\" rx=\"6\" ry=\"6\" width=\"444\" height=\"15\" />\n    <circle cx=\"79\" cy=\"219\" r=\"15\" />\n    <rect x=\"117\" y=\"263\" rx=\"6\" ry=\"6\" width=\"483\" height=\"15\" />\n    <circle cx=\"80\" cy=\"271\" r=\"15\" />\n  </ContentLoader>\n);\n\nHelpLinksLoader.metadata = {\n  name: \"Sridhar Easwaran\",\n  github: \"sridhareaswaran\",\n  description: \"HelpLinks\",\n  filename: \"HelpLinksLoader\",\n};\n\nexport default HelpLinksLoader;\n","import React, { Component } from \"react\";\nimport axios from \"axios\";\nimport Repository from \"../Repository/Repository\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./FetchRepositories.css\";\nimport SVG1 from \"../SVGs/SVG1\";\n\nclass FetchRepositories extends Component {\n  state = {\n    repositoryData: [],\n    fetchErr: false,\n    gitUsername: \"\",\n    invalidInput: null,\n    requestComplete: null,\n    repositoryCount: 0,\n  };\n\n  fetchRepositories = (event) => {\n    event.preventDefault();\n    if (this.state.gitUsername === \"\") {\n      return this.setState({ invalidInput: <p>This is a required field.</p> });\n    } else {\n      this.setState({ repositoryData: [] });\n      this.setState({ invalidInput: null });\n      this.setState({ requestComplete: false });\n      axios\n        .get(\n          `https://api.github.com/users/${\n            this.state.gitUsername\n          }/repos?per_page=${100}`\n        )\n        .then((repoObj) => {\n          let repoCount = 0;\n          this.setState({ fetchErr: false });\n          const repoData = [...this.state.repositoryData];\n          const responseData = repoObj.data;\n          responseData.forEach((repo) => {\n            repoCount++;\n            repoData.push(repo);\n          });\n          this.setState({ repositoryData: repoData });\n          this.setState({ requestComplete: true });\n          this.setState({\n            repositoryCount: this.state.repositoryCount + repoCount,\n          });\n          console.log(this.state.repositoryCount);\n        })\n        .catch((err) => {\n          if (err) {\n            this.setState({ fetchErr: true });\n            this.setState({ requestComplete: true });\n            throw err;\n          }\n        });\n    }\n  };\n\n  setUsername = (event) => {\n    this.setState({ gitUsername: event.target.value.trim() });\n  };\n\n  render() {\n    let repositories = <p>Oops! Username not found.</p>;\n    if (!this.state.fetchErr) {\n      repositories = this.state.repositoryData.map((repo) => {\n        return (\n          <Repository\n            title={repo.name}\n            description={repo.description}\n            forks={repo.forks}\n            stars={repo.stargazers_count}\n            language={repo.language}\n            appUrl={repo.svn_url}\n            projUrl={repo.html_url}\n            recentCommit={repo.pushed_at}\n            key={repo.id}\n          />\n        );\n      });\n    } else if (this.state.gitUsername === \"\") {\n      repositories = null;\n    }\n\n    return (\n      <div className=\"main-container\">\n        <div className=\"mt-5 form-wrapper\">\n          <form className=\"form-container\">\n            <input\n              className=\"form-control\"\n              type=\"text\"\n              placeholder=\"Github Username\"\n              onChange={(event) => this.setUsername(event)}\n              required\n            />\n            {this.state.invalidInput}\n            {this.state.fetchErr ? repositories : null}\n            <button\n              className=\"btn btn-info\"\n              type=\"submit\"\n              onClick={(event) => this.fetchRepositories(event)}\n            >\n              Fetch Repos\n            </button>\n          </form>\n        </div>\n        {this.state.requestComplete === false ? (\n          <div className=\"svg-container\">\n            <SVG1 className=\"svg\" />\n            <SVG1 className=\"svg\" />\n            <SVG1 className=\"svg\" />\n          </div>\n        ) : null}\n        <div className=\"repositories\">\n          {this.state.fetchErr ? null : repositories}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default FetchRepositories;\n","import React, { Component } from \"react\";\nimport FetchRepositories from \"../Components/FetchRepositories/FetchRepositories\";\nimport \"./App.css\";\n\nclass App extends Component {\n  render() {\n    return (\n      <div>\n        <FetchRepositories />\n      </div>\n    );\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./Containers/App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport axios from \"axios\";\n\naxios.defaults.headers.post[\"Content-Type\"] = \"application/json\";\n\naxios.interceptors.request.use(\n  (request) => {\n    console.log(request);\n    return request;\n  },\n  (error) => {\n    console.log(error);\n    return Promise.reject(error);\n  }\n);\n\naxios.interceptors.response.use(\n  (response) => {\n    console.log(response.data);\n    return response;\n  },\n  (error) => {\n    console.log(error);\n    return Promise.reject(error);\n  }\n);\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}